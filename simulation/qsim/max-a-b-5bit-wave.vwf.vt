// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/17/2016 14:57:31"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ULA
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ULA_vlg_sample_tst(
	A,
	B,
	S,
	sampler_tx
);
input [0:4] A;
input [0:4] B;
input [0:2] S;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or S)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ULA_vlg_check_tst (
	DISPLAY1,
	DISPLAY2,
	F,
	Overflow,
	Sinal,
	Status,
	sampler_rx
);
input [0:6] DISPLAY1;
input [0:6] DISPLAY2;
input [0:4] F;
input  Overflow;
input  Sinal;
input  Status;
input sampler_rx;

reg [0:6] DISPLAY1_expected;
reg [0:6] DISPLAY2_expected;
reg [0:4] F_expected;
reg  Overflow_expected;
reg  Sinal_expected;
reg  Status_expected;

reg [0:6] DISPLAY1_prev;
reg [0:6] DISPLAY2_prev;
reg [0:4] F_prev;
reg  Overflow_prev;
reg  Sinal_prev;
reg  Status_prev;

reg [0:6] DISPLAY1_expected_prev;
reg [0:6] DISPLAY2_expected_prev;
reg [0:4] F_expected_prev;
reg  Overflow_expected_prev;
reg  Sinal_expected_prev;
reg  Status_expected_prev;

reg [0:6] last_DISPLAY1_exp;
reg [0:6] last_DISPLAY2_exp;
reg [0:4] last_F_exp;
reg  last_Overflow_exp;
reg  last_Sinal_exp;
reg  last_Status_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	DISPLAY1_prev = DISPLAY1;
	DISPLAY2_prev = DISPLAY2;
	F_prev = F;
	Overflow_prev = Overflow;
	Sinal_prev = Sinal;
	Status_prev = Status;
end

// update expected /o prevs

always @(trigger)
begin
	DISPLAY1_expected_prev = DISPLAY1_expected;
	DISPLAY2_expected_prev = DISPLAY2_expected;
	F_expected_prev = F_expected;
	Overflow_expected_prev = Overflow_expected;
	Sinal_expected_prev = Sinal_expected;
	Status_expected_prev = Status_expected;
end


// expected DISPLAY1[ 6 ]
initial
begin
	DISPLAY1_expected[6] = 1'b0;
end 
// expected DISPLAY1[ 5 ]
initial
begin
	DISPLAY1_expected[5] = 1'b0;
end 
// expected DISPLAY1[ 4 ]
initial
begin
	DISPLAY1_expected[4] = 1'b0;
end 
// expected DISPLAY1[ 3 ]
initial
begin
	DISPLAY1_expected[3] = 1'b0;
end 
// expected DISPLAY1[ 2 ]
initial
begin
	DISPLAY1_expected[2] = 1'b0;
end 
// expected DISPLAY1[ 1 ]
initial
begin
	DISPLAY1_expected[1] = 1'b0;
end 
// expected DISPLAY1[ 0 ]
initial
begin
	DISPLAY1_expected[0] = 1'b0;
end 
// expected DISPLAY2[ 6 ]
initial
begin
	DISPLAY2_expected[6] = 1'b0;
end 
// expected DISPLAY2[ 5 ]
initial
begin
	DISPLAY2_expected[5] = 1'b0;
end 
// expected DISPLAY2[ 4 ]
initial
begin
	DISPLAY2_expected[4] = 1'b0;
end 
// expected DISPLAY2[ 3 ]
initial
begin
	DISPLAY2_expected[3] = 1'b0;
end 
// expected DISPLAY2[ 2 ]
initial
begin
	DISPLAY2_expected[2] = 1'b0;
end 
// expected DISPLAY2[ 1 ]
initial
begin
	DISPLAY2_expected[1] = 1'b0;
end 
// expected DISPLAY2[ 0 ]
initial
begin
	DISPLAY2_expected[0] = 1'b0;
end 
// expected F[ 4 ]
initial
begin
	F_expected[4] = 1'b0;
end 
// expected F[ 3 ]
initial
begin
	F_expected[3] = 1'b0;
end 
// expected F[ 2 ]
initial
begin
	F_expected[2] = 1'b0;
end 
// expected F[ 1 ]
initial
begin
	F_expected[1] = 1'b0;
end 
// expected F[ 0 ]
initial
begin
	F_expected[0] = 1'b0;
end 

// expected Overflow
initial
begin
	Overflow_expected = 1'b0;
end 

// expected Sinal
initial
begin
	Sinal_expected = 1'b0;
end 

// expected Status
initial
begin
	Status_expected = 1'b0;
end 
// generate trigger
always @(DISPLAY1_expected or DISPLAY1 or DISPLAY2_expected or DISPLAY2 or F_expected or F or Overflow_expected or Overflow or Sinal_expected or Sinal or Status_expected or Status)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DISPLAY1 = %b | expected DISPLAY2 = %b | expected F = %b | expected Overflow = %b | expected Sinal = %b | expected Status = %b | ",DISPLAY1_expected_prev,DISPLAY2_expected_prev,F_expected_prev,Overflow_expected_prev,Sinal_expected_prev,Status_expected_prev);
	$display("| real DISPLAY1 = %b | real DISPLAY2 = %b | real F = %b | real Overflow = %b | real Sinal = %b | real Status = %b | ",DISPLAY1_prev,DISPLAY2_prev,F_prev,Overflow_prev,Sinal_prev,Status_prev);
`endif
	if (
		( DISPLAY1_expected_prev[0] !== 1'bx ) && ( DISPLAY1_prev[0] !== DISPLAY1_expected_prev[0] )
		&& ((DISPLAY1_expected_prev[0] !== last_DISPLAY1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISPLAY1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISPLAY1_expected_prev);
		$display ("     Real value = %b", DISPLAY1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DISPLAY1_exp[0] = DISPLAY1_expected_prev[0];
	end
	if (
		( DISPLAY1_expected_prev[1] !== 1'bx ) && ( DISPLAY1_prev[1] !== DISPLAY1_expected_prev[1] )
		&& ((DISPLAY1_expected_prev[1] !== last_DISPLAY1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISPLAY1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISPLAY1_expected_prev);
		$display ("     Real value = %b", DISPLAY1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DISPLAY1_exp[1] = DISPLAY1_expected_prev[1];
	end
	if (
		( DISPLAY1_expected_prev[2] !== 1'bx ) && ( DISPLAY1_prev[2] !== DISPLAY1_expected_prev[2] )
		&& ((DISPLAY1_expected_prev[2] !== last_DISPLAY1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISPLAY1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISPLAY1_expected_prev);
		$display ("     Real value = %b", DISPLAY1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DISPLAY1_exp[2] = DISPLAY1_expected_prev[2];
	end
	if (
		( DISPLAY1_expected_prev[3] !== 1'bx ) && ( DISPLAY1_prev[3] !== DISPLAY1_expected_prev[3] )
		&& ((DISPLAY1_expected_prev[3] !== last_DISPLAY1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISPLAY1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISPLAY1_expected_prev);
		$display ("     Real value = %b", DISPLAY1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DISPLAY1_exp[3] = DISPLAY1_expected_prev[3];
	end
	if (
		( DISPLAY1_expected_prev[4] !== 1'bx ) && ( DISPLAY1_prev[4] !== DISPLAY1_expected_prev[4] )
		&& ((DISPLAY1_expected_prev[4] !== last_DISPLAY1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISPLAY1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISPLAY1_expected_prev);
		$display ("     Real value = %b", DISPLAY1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DISPLAY1_exp[4] = DISPLAY1_expected_prev[4];
	end
	if (
		( DISPLAY1_expected_prev[5] !== 1'bx ) && ( DISPLAY1_prev[5] !== DISPLAY1_expected_prev[5] )
		&& ((DISPLAY1_expected_prev[5] !== last_DISPLAY1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISPLAY1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISPLAY1_expected_prev);
		$display ("     Real value = %b", DISPLAY1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DISPLAY1_exp[5] = DISPLAY1_expected_prev[5];
	end
	if (
		( DISPLAY1_expected_prev[6] !== 1'bx ) && ( DISPLAY1_prev[6] !== DISPLAY1_expected_prev[6] )
		&& ((DISPLAY1_expected_prev[6] !== last_DISPLAY1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISPLAY1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISPLAY1_expected_prev);
		$display ("     Real value = %b", DISPLAY1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DISPLAY1_exp[6] = DISPLAY1_expected_prev[6];
	end
	if (
		( DISPLAY2_expected_prev[0] !== 1'bx ) && ( DISPLAY2_prev[0] !== DISPLAY2_expected_prev[0] )
		&& ((DISPLAY2_expected_prev[0] !== last_DISPLAY2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISPLAY2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISPLAY2_expected_prev);
		$display ("     Real value = %b", DISPLAY2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DISPLAY2_exp[0] = DISPLAY2_expected_prev[0];
	end
	if (
		( DISPLAY2_expected_prev[1] !== 1'bx ) && ( DISPLAY2_prev[1] !== DISPLAY2_expected_prev[1] )
		&& ((DISPLAY2_expected_prev[1] !== last_DISPLAY2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISPLAY2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISPLAY2_expected_prev);
		$display ("     Real value = %b", DISPLAY2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DISPLAY2_exp[1] = DISPLAY2_expected_prev[1];
	end
	if (
		( DISPLAY2_expected_prev[2] !== 1'bx ) && ( DISPLAY2_prev[2] !== DISPLAY2_expected_prev[2] )
		&& ((DISPLAY2_expected_prev[2] !== last_DISPLAY2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISPLAY2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISPLAY2_expected_prev);
		$display ("     Real value = %b", DISPLAY2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DISPLAY2_exp[2] = DISPLAY2_expected_prev[2];
	end
	if (
		( DISPLAY2_expected_prev[3] !== 1'bx ) && ( DISPLAY2_prev[3] !== DISPLAY2_expected_prev[3] )
		&& ((DISPLAY2_expected_prev[3] !== last_DISPLAY2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISPLAY2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISPLAY2_expected_prev);
		$display ("     Real value = %b", DISPLAY2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DISPLAY2_exp[3] = DISPLAY2_expected_prev[3];
	end
	if (
		( DISPLAY2_expected_prev[4] !== 1'bx ) && ( DISPLAY2_prev[4] !== DISPLAY2_expected_prev[4] )
		&& ((DISPLAY2_expected_prev[4] !== last_DISPLAY2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISPLAY2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISPLAY2_expected_prev);
		$display ("     Real value = %b", DISPLAY2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DISPLAY2_exp[4] = DISPLAY2_expected_prev[4];
	end
	if (
		( DISPLAY2_expected_prev[5] !== 1'bx ) && ( DISPLAY2_prev[5] !== DISPLAY2_expected_prev[5] )
		&& ((DISPLAY2_expected_prev[5] !== last_DISPLAY2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISPLAY2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISPLAY2_expected_prev);
		$display ("     Real value = %b", DISPLAY2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DISPLAY2_exp[5] = DISPLAY2_expected_prev[5];
	end
	if (
		( DISPLAY2_expected_prev[6] !== 1'bx ) && ( DISPLAY2_prev[6] !== DISPLAY2_expected_prev[6] )
		&& ((DISPLAY2_expected_prev[6] !== last_DISPLAY2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISPLAY2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISPLAY2_expected_prev);
		$display ("     Real value = %b", DISPLAY2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DISPLAY2_exp[6] = DISPLAY2_expected_prev[6];
	end
	if (
		( F_expected_prev[0] !== 1'bx ) && ( F_prev[0] !== F_expected_prev[0] )
		&& ((F_expected_prev[0] !== last_F_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_F_exp[0] = F_expected_prev[0];
	end
	if (
		( F_expected_prev[1] !== 1'bx ) && ( F_prev[1] !== F_expected_prev[1] )
		&& ((F_expected_prev[1] !== last_F_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_F_exp[1] = F_expected_prev[1];
	end
	if (
		( F_expected_prev[2] !== 1'bx ) && ( F_prev[2] !== F_expected_prev[2] )
		&& ((F_expected_prev[2] !== last_F_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_F_exp[2] = F_expected_prev[2];
	end
	if (
		( F_expected_prev[3] !== 1'bx ) && ( F_prev[3] !== F_expected_prev[3] )
		&& ((F_expected_prev[3] !== last_F_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_F_exp[3] = F_expected_prev[3];
	end
	if (
		( F_expected_prev[4] !== 1'bx ) && ( F_prev[4] !== F_expected_prev[4] )
		&& ((F_expected_prev[4] !== last_F_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_F_exp[4] = F_expected_prev[4];
	end
	if (
		( Overflow_expected_prev !== 1'bx ) && ( Overflow_prev !== Overflow_expected_prev )
		&& ((Overflow_expected_prev !== last_Overflow_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Overflow_expected_prev);
		$display ("     Real value = %b", Overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Overflow_exp = Overflow_expected_prev;
	end
	if (
		( Sinal_expected_prev !== 1'bx ) && ( Sinal_prev !== Sinal_expected_prev )
		&& ((Sinal_expected_prev !== last_Sinal_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sinal :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sinal_expected_prev);
		$display ("     Real value = %b", Sinal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Sinal_exp = Sinal_expected_prev;
	end
	if (
		( Status_expected_prev !== 1'bx ) && ( Status_prev !== Status_expected_prev )
		&& ((Status_expected_prev !== last_Status_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Status :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Status_expected_prev);
		$display ("     Real value = %b", Status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Status_exp = Status_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#800000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ULA_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [0:4] A;
reg [0:4] B;
reg [0:2] S;
// wires                                               
wire [0:6] DISPLAY1;
wire [0:6] DISPLAY2;
wire [0:4] F;
wire Overflow;
wire Sinal;
wire Status;

wire sampler;                             

// assign statements (if any)                          
ULA i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.DISPLAY1(DISPLAY1),
	.DISPLAY2(DISPLAY2),
	.F(F),
	.Overflow(Overflow),
	.S(S),
	.Sinal(Sinal),
	.Status(Status)
);
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
	A[4] = #200000 1'b1;
	A[4] = #200000 1'b0;
	A[4] = #300000 1'b1;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
	A[3] = #100000 1'b1;
	A[3] = #100000 1'b0;
	A[3] = #200000 1'b1;
	A[3] = #200000 1'b0;
	A[3] = #100000 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
	A[2] = #300000 1'b1;
	A[2] = #100000 1'b0;
	A[2] = #100000 1'b1;
	A[2] = #200000 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
	A[1] = #100000 1'b1;
	A[1] = #100000 1'b0;
	A[1] = #100000 1'b1;
	A[1] = #100000 1'b0;
	A[1] = #100000 1'b1;
	A[1] = #100000 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
	A[0] = #100000 1'b0;
	A[0] = #100000 1'b1;
	A[0] = #100000 1'b0;
	A[0] = #300000 1'b1;
	A[0] = #100000 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
	B[4] = #100000 1'b1;
	B[4] = #200000 1'b0;
	B[4] = #400000 1'b1;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b1;
	B[3] = #100000 1'b0;
	B[3] = #100000 1'b1;
	B[3] = #300000 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b1;
	B[2] = #200000 1'b0;
	B[2] = #100000 1'b1;
	B[2] = #300000 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
	B[1] = #400000 1'b1;
	B[1] = #100000 1'b0;
	B[1] = #200000 1'b1;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
	B[0] = #200000 1'b1;
	B[0] = #100000 1'b0;
	B[0] = #100000 1'b1;
	B[0] = #300000 1'b0;
end 
// S[ 2 ]
initial
begin
	S[2] = 1'b1;
end 
// S[ 1 ]
initial
begin
	S[1] = 1'b1;
end 
// S[ 0 ]
initial
begin
	S[0] = 1'b0;
end 

ULA_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.S(S),
	.sampler_tx(sampler)
);

ULA_vlg_check_tst tb_out(
	.DISPLAY1(DISPLAY1),
	.DISPLAY2(DISPLAY2),
	.F(F),
	.Overflow(Overflow),
	.Sinal(Sinal),
	.Status(Status),
	.sampler_rx(sampler)
);
endmodule

